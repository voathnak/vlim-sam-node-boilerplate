AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  vlim-sam-node-boilerplate is Boilerplate of AWS SAM Using NodeJs 12.x

  Sample SAM Template for vlim-sam-node-boilerplate



Globals:
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
  Function:
    Timeout: 90
    Runtime: nodejs12.x
    MemorySize: 128



Parameters:
  DeploymentS3BucketName:
    Type: String
    Description: The name of the S3 bucket in which the Swagger specification is stored
  StageName:
    Type: String
    Description: The name of the stage, e.g. "dev", "preprod", "prod"
    Default: devii
  AppName:
    Type: String
    Description: The name of the APP
    Default: vlim-sam-node-boilerplate
  TodoTableName:
    Type: String
    Default: 'TodoTable'
    Description: (Required) The name of the new DynamoDB table you want to create and save to. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z]+$
    ConstraintDescription: 'Required parameter. Must be characters only. No numbers allowed.'
  UserTableName:
    Type: String
    Default: 'UserTable'
    Description: (Required) The name of the new DynamoDB table you want to create and save to. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z]+$
    ConstraintDescription: 'Required parameter. Must be characters only. No numbers allowed.'



Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AppName}-${StageName}-api-gateway
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*" # allows for logging on any resource
          HttpMethod: "*" # allows for logging on any method
      StageName:
        Ref: StageName
      Cors:
        AllowMethods: "'POST, GET, PUT, PATCH, DELETE, OPTIONS'"
        AllowHeaders: "'Content-Type, Authorization, X-Amz-Date, X-Api-Key, X-Amz-Security-Token, X-Forwarded-For'"
        AllowOrigin: "'*'"

  listTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-${StageName}-listTodo
      CodeUri: todos/
      Handler: handler.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${AppName}-${StageName}-${TodoTableName}"
      Environment:
        Variables:
          DYNAMODB_TODO_TABLE: !Sub "${AppName}-${StageName}-${TodoTableName}"
      Events:
        listTodo:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /todos
            Method: GET
        createTodo:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /todos
            Method: POST
        readTodo:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /todos/{itemId}
            Method: GET
        updateTodo:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /todos/{itemId}
            Method: PATCH
        deleteTodo:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /todos/{itemId}
            Method: DELETE
      Layers:
        - !Ref NodeDependencies
        - !Ref CoreLibs

  CoreLibs:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      ContentUri: core/
      CompatibleRuntimes: # optional
        - nodejs12.x

  NodeDependencies:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      ContentUri: dependencies/
      CompatibleRuntimes: # optional
        - nodejs12.x

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/vlim-APIGateway-push-to-cloud-watch'

  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref RestApi
      Description: My ApiGateway deployment
      StageDescription:
        LoggingLevel: INFO
      StageName: Prod


  TodosDynamoDbTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub "${AppName}-${StageName}-${TodoTableName}"
      AttributeDefinitions:
        - AttributeName: itemId
          AttributeType: S
      KeySchema:
        - AttributeName: itemId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1


Outputs:
  WebEndpoint:
    Description: "API URL"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
  RestApiId:
    Description: "API Gateway ID"
    Value: !Ref RestApi
